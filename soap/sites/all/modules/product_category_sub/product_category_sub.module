<?php
/**
 * Implements of hook_views_api().
 */
function product_category_sub_views_api() {
  return array('api' => 3);
}
/**
 * Implements hook_node_view().
 */
function product_category_sub_node_view($node, $view_mode, $langcode) {

    // Add content type specific JS on full page node view
    if($view_mode == 'full'){
        //dvm(libraries_detect('jquery.bxslider'));
        switch($node->type){
            case 'hats':
                //$node->content['#attached']['libraries_load'][] = array('jquery.bxslider');
                $node->content['#attached']['js'][] = array('data' => 'sites/all/libraries/bxslider/jquery.bxslider.min.js');
                $node->content['#attached']['js'][] = array('data' => 'sites/all/themes/soapomegacom2/js/bxslider.setting.js');
                $node->content['#attached']['js'][] = array('data' => 'sites/all/themes/soapomegacom2/js/product_more_info.js');
                $node->content['#attached']['css'][] = array('data' => 'sites/all/libraries/bxslider/jquery.bxslider.css');
                break;
        }
    }

}

/**
 * Implements hook_libraries_info().
 *
 * For defining external libraries.
 */
/*function product_category_sub_libraries_info() {
    dpm('877887');
    // A very simple library. No changing APIs (hence, no versions), no variants.
    // Expected to be extracted into 'sites/all/libraries/simple'.
    $libraries['bxslider'] = array(
        'name' => 'bxslider',
        'vendor url' => 'https://github.com/wandoledzep/bxslider-4',
        'download url' => 'https://github.com/wandoledzep/bxslider-4/archive/master.zip',
        'version' => '4.1.1',
        'version arguments' => array(
            'file' => 'bxslider.min.js', // Could be any file with version info
            'pattern' => '/BxSlider v(\d+)/',
            'lines' => 3,
        ),
        'files' => array(
            'js' => array('jquery.bxslider.min.js'),
            'css' => array('jquery.bxslider.css'),
        ),
    );
}*/


/*function product_category_sub_node_view_alter(&$build) {
    dpm($build, 'build');
    if ($node->type == 'hats') {
        dpm('1111');
        print views_embed_view('product_category_sub','page_1');
    }
}*/

/**
 * Implements of hook_views_pre_execute(&$view).
 */

/*function product_category_sub_url_outbound_alter(&$path, &$options ,$original_path) {
    dfb($path, 'in_path');
dfb($original_path, 'in_orig_path');
dfb($options, 'in_path_lang');
}*/


/**
 *  Found this trick on theoleschool.com.
 *
 *  Description: Allows the view developer to specify the query
 *  group by action in the query comments. Great way to force the
 *  removal of duplicates.
 *
 *  Just go into your query comments and type in "groupby:" with
 *  that colon followed by the field you want to group by.
 *
 *  Examples...
 *  groupby:node.nid
 *  groupby:file_managed_file_usage.fid
 *
 *  Ref-Comment: http://theoleschool.com/comment/496#comment-496
 *  Ref-Article: http://theoleschool.com/blog/using-hookviewsalter-add-group-statement
 */
/*function product_category_sub_query_alter(QueryAlterableInterface $query) {
  if ($query->hasTag('views')) {
    static $count;
    $view =& $query->getMetaData('view');
      if ($view->name == "product_category_sub" && $view->current_display == 'entity_view_2') {
dpm(99999);
          list($action, $field) = array('groupby','MIN(commerce_product.title)');

            $query->groupBy($field);
      }
  }
}*/