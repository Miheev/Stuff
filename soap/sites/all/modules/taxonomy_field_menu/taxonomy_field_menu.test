<?php

/**
 * @file
 * Tests functions of taxonomy field menu module.
 */

/**
 * Base class for test.
 */
class TaxonomyFieldMenuBaseTestCase extends DrupalWebTestCase {

  /**
   * Vocabulary for test.
   */
  public $vocabulary;

  /**
   * Terms array for test.
   */
  public $terms = array();

  /**
   * Nodes array for test.
   */
  public $nodes = array();

  /**
   * Setup basic requirements for tests.
   */
  public function setUp() {

    // Enable necessary modules.
    parent::setUp(array(
      'taxonomy',
      'menu',
      'taxonomy_field_menu',
      'pathauto',
      'token'));

    // Create a privileged user.
    $this->user = $this->drupalCreateUser(array(
      'administer content types',
      'administer blocks',
      'administer taxonomy',
      'administer menu',
      'administer nodes'));
    $this->drupalLogin($this->user);

    // Create vocabulary and terms.
    $this->vocabulary = $this->createVocabulary();
    $this->terms[0] = $this->createTerm($this->vocabulary);
    $this->terms[1] = $this->createTerm($this->vocabulary);

    // Attach one taxonomy field to content type 'article'.
    $this->taxonomy_field_name = drupal_strtolower($this->randomName(10));
    $taxonomy_field = array(
      'field_name' => $this->taxonomy_field_name,
      'type' => 'taxonomy_term_reference',
      'cardinality' => 1,
      'settings' => array(
        'allowed_values' => array(
          array(
            'vocabulary' => $this->vocabulary->machine_name,
            'parent' => '0',
          ),
        ),
      ),
    );
    field_create_field($taxonomy_field);

    $taxonomy_field_instance = array(
      'field_name' => $this->taxonomy_field_name,
      'entity_type' => 'node',
      'bundle' => 'article',
    );
    field_create_instance($taxonomy_field_instance);

    // Create two nodes.
    $node_1 = array(
      'type' => 'article',
      $this->taxonomy_field_name => array(
        LANGUAGE_NONE => array(
          array(
            'tid' => $this->terms[0]->tid,
          ),
        ),
      ),
    );
    $this->nodes[0] = $this->drupalCreateNode($node_1);

    $node_2 = array(
      'type' => 'article',
      $this->taxonomy_field_name => array(
        LANGUAGE_NONE => array(
          array(
            'tid' => $this->terms[1]->tid,
          ),
        ),
      ),
    );
    $this->nodes[1] = $this->drupalCreateNode($node_2);
  }

  /**
   * Returns a new vocabulary with random properties.
   */
  public function createVocabulary() {
    // Create a vocabulary.
    $vocabulary = new stdClass();
    $vocabulary->name = $this->randomName();
    $vocabulary->description = $this->randomName();
    $vocabulary->machine_name = drupal_strtolower($this->randomName());
    $vocabulary->help = '';
    $vocabulary->nodes = array('article' => 'article');
    $vocabulary->weight = mt_rand(0, 10);
    taxonomy_vocabulary_save($vocabulary);
    return $vocabulary;
  }

  /**
   * Returns a new term with random properties in vocabulary $vid.
   */
  public function createTerm($vocabulary) {
    $term = $this->createNewTerm($vocabulary);
    taxonomy_term_save($term);
    return $term;
  }

  /**
   * Create a new term record.
   */
  public function createNewTerm($vocabulary, $name = NULL, $parent = NULL) {
    $term = new stdClass();
    $term->name = ($name === NULL) ? $this->randomName() : $name;
    $term->description = $this->randomName();
    $term->format = filter_default_format();
    $term->vid = $vocabulary->vid;
    if ($parent !== NULL) {
      $term->parent = array($parent->tid);
    }
    return $term;
  }
}

/**
 * Test basic functions provided by taxonomy field menu module.
 */
class testTaxonomyFieldMenuTestCase extends TaxonomyFieldMenuBaseTestCase {

  /**
   * Setup the test.
   *
   * Initialize one taxonomy field menu.
   */
  public function setUp() {
    parent::setUp();
    $this->initializeTaxonomyFieldMenu();
  }

  /**
   * Reports to drupal of this test.
   */
  public static function getInfo() {
    return array(
      'name' => 'Taxonomy field menu functions',
      'description' => 'Test basic functions provided by Taxonomy field menu module',
      'group' => 'Taxonomy Field Menu',
    );
  }

  /**
   * Initialize taxonomy field menu for a taxonomy field.
   */
  public function initializeTaxonomyFieldMenu() {
    // Reset static variables for new taxonomy field menu.
    drupal_static_reset();

    // Enable taxonomy field menu for one taxonomy field.
    $suggested_machine_name = preg_replace('/_/', '-', $this->taxonomy_field_name);
    $suggested_machine_name = substr($suggested_machine_name, 0, MENU_MAX_MENU_NAME_LENGTH_UI);
    $edit = array(
      'menu_flag' => TRUE,
      'menu_machine_name' => $suggested_machine_name,
      'custom_page' => TRUE,
      'child_node' => TRUE,
      'url_alias' => TRUE,
      'sync_node' => TRUE,
      'sync_term' => TRUE,
    );
    $path = 'admin/structure/types/manage/article/fields/' . $this->taxonomy_field_name;
    $this->drupalGet($path);
    $this->assertResponse(200);
    $this->assertText('Enable custom term page for this taxonomy field menu.', 'Taxonomy field menu setting is available at taxonomy field editing page.');
    $this->drupalPost($path, $edit, 'Save settings');
    $this->assertResponse(200);

    // Checks new taxonomy field menu existing in database.
    $this->taxonomy_field_menu = _taxonomy_field_menu_get_menus(NULL, $this->taxonomy_field_name);
    $this->assertNotNull($this->taxonomy_field_menu, 'New taxonomy field menu record is created in taxonomy field module table.');

    // Checks block ui.
    $this->drupalGet('admin/structure/block');
    $this->assertText('Taxonomy field menu for ' . $this->taxonomy_field_name, 'New taxonomy field menu is available at drupal block ui.');

    // Move the menu block to a region.
    $edit = array();
    $edit['blocks[menu_' . $this->taxonomy_field_menu->menu_name . '][region]'] = 'sidebar_first';
    $this->drupalPost('admin/structure/block', $edit, 'Save blocks');
    $this->assertResponse(200);

    // Checks the block in front page.
    $this->drupalGet('<front>');
    $this->assertLink($this->terms[0]->name);
    $this->assertLink($this->terms[1]->name);
    // Node links are nested inside this menu and shouldn't be seen.
    $this->assertNoLink($this->nodes[0]->title);
    $this->assertNoLink($this->nodes[1]->title);
  }

  /**
   * Test new created taxonomy field menu existing well in database.
   */
  public function testNewCreatedTaxonomyFieldMenu() {

    // Checks in default menu ui.
    $this->drupalGet('admin/structure/menu/manage/' . $this->taxonomy_field_menu->menu_name);
    $this->assertResponse(200, 'New taxonomy field menu is available at drupal default menu ui.');

    $this->assertLink($this->terms[0]->name);
    $this->assertLink($this->terms[1]->name);
    $this->assertLink($this->nodes[0]->title);
    $this->assertLink($this->nodes[1]->title);

    // Checks taxonomy field menu central menus list.
    $this->drupalGet('admin/structure/taxonomy_field_menu');
    $this->assertResponse(200, 'Taxonomy field menu central list page is available.');
    $this->assertLink('Taxonomy field menu for ' . $this->taxonomy_field_name);

    // Checks individual custom term page.
    $this->drupalGet('taxonomy_field_menu/' . $this->taxonomy_field_menu->menu_name . '/' . $this->terms[0]->tid);
    $this->assertResponse(200, 'Custom term page is built successfully.');
    $this->assertLink($this->nodes[0]->title);
    $this->assertNoLink($this->nodes[1]->title);

    // Checks custom term page's url alias.
    $data['taxonomy_field_menu'] = $this->taxonomy_field_menu;
    $this->taxonomy_field_menu->term = $this->terms[1];
    $source = 'taxonomy_field_menu/' . $this->taxonomy_field_menu->menu_name . '/' . $this->terms[1]->tid;
    $url_alias = pathauto_create_alias('taxonomy_field_menu', 'return', $source, $data, $this->taxonomy_field_menu->field_name);

    $this->drupalGet($url_alias);
    $this->assertResponse(200, 'Url alias for custom term page is secussfully set.');
    $this->assertLink($this->nodes[1]->title);
    $this->assertNoLink($this->nodes[0]->title);
  }

  /**
   * Test synchronize nodes for this taxonomy field menu.
   *
   * Possible sync actions inlcude 'create', 'update', 'delete'.
   */
  public function testSynchronizeNodes() {
    // Creates a new node.
    $node = array(
      'type' => 'article',
      $this->taxonomy_field_name => array(
        LANGUAGE_NONE => array(
          array(
            'tid' => $this->terms[0]->tid,
          ),
        ),
      ),
    );
    $new_node = $this->drupalCreateNode($node);

    $this->drupalGet('admin/structure/menu/manage/' . $this->taxonomy_field_menu->menu_name);
    $this->assertResponse(200);
    $this->assertLink($new_node->title);
    $this->drupalGet('taxonomy_field_menu/' . $this->taxonomy_field_menu->menu_name . '/' . $this->terms[0]->tid);
    $this->assertLink($new_node->title);
    $this->drupalGet('taxonomy_field_menu/' . $this->taxonomy_field_menu->menu_name . '/' . $this->terms[1]->tid);
    $this->assertNoLink($new_node->title);

    // Updates new node's taxonomy field value to $this->term[1].
    $new_node->{$this->taxonomy_field_name}[LANGUAGE_NONE][0]['tid'] = $this->terms[1]->tid;
    node_save($new_node);

    // Now clear the menu cache.
    // Generally, it's not necessary, but this test code may experience some
    // cache issue.
    menu_cache_clear_all();

    // New node link should have moved to under $this->term[1].
    $this->drupalGet('taxonomy_field_menu/' . $this->taxonomy_field_menu->menu_name . '/' . $this->terms[0]->tid);
    $this->assertNoLink($new_node->title);

    $this->drupalGet('taxonomy_field_menu/' . $this->taxonomy_field_menu->menu_name . '/' . $this->terms[1]->tid);
    $this->assertLink($new_node->title);

    // Deletes this node.
    node_delete($new_node->nid);
    $this->drupalGet('taxonomy_field_menu/' . $this->taxonomy_field_menu->menu_name . '/' . $this->terms[1]->tid);
    $this->assertNoLink($new_node->title);

    $this->drupalGet('admin/structure/menu/manage/' . $this->taxonomy_field_menu->menu_name);
    $this->assertNoLink($new_node->title);
  }

  /**
   * Test synchronize terms for this taxonomy field menu.
   *
   * Possible sync actions inlcude 'create', 'update', 'delete'.
   */
  public function testSynchronizeTerms() {

    // Creates new term.
    $new_term = $this->createTerm($this->vocabulary);

    // Checks new term is available in taxonomy field menu.
    $this->drupalGet('admin/structure/menu/manage/' . $this->taxonomy_field_menu->menu_name);
    $this->assertResponse(200);
    $this->assertLink($new_term->name);
    $this->drupalGet('taxonomy_field_menu/' . $this->taxonomy_field_menu->menu_name . '/' . $new_term->tid);
    $this->assertResponse(200);
    $this->drupalGet('taxonomy_field_menu/' . $this->taxonomy_field_menu->menu_name . '/' . $this->terms[0]->tid);
    $this->assertLink($new_term->name);
    $this->drupalGet('taxonomy_field_menu/' . $this->taxonomy_field_menu->menu_name . '/' . $this->terms[1]->tid);
    $this->assertLink($new_term->name);

    // Updates new term.
    $new_term->parent = $this->terms[0]->tid;
    taxonomy_term_save($new_term);

    // Now clear the menu cache.
    // Generally, it's not necessary, but this test code may experience some
    // cache issue.
    menu_cache_clear_all();

    // Checks new term's link moving to under $this->terms[0].
    $this->drupalGet('taxonomy_field_menu/' . $this->taxonomy_field_menu->menu_name . '/' . $new_term->tid);
    $this->assertResponse(200);
    $this->drupalGet('taxonomy_field_menu/' . $this->taxonomy_field_menu->menu_name . '/' . $this->terms[0]->tid);
    $this->assertResponse(200);
    $this->assertLink($new_term->name);
    $this->drupalGet('taxonomy_field_menu/' . $this->taxonomy_field_menu->menu_name . '/' . $this->terms[1]->tid);
    $this->assertNoLink($new_term->name);

    // Deletes new term.
    taxonomy_term_delete($new_term->tid);
    $this->drupalGet('admin/structure/menu/manage/' . $this->taxonomy_field_menu->menu_name);
    $this->assertNoLink($new_term->name, 'New term has been removed from taxonomy field menu successfully.');
    $this->drupalGet('taxonomy_field_menu/' . $this->taxonomy_field_menu->menu_name . '/' . $new_term->tid);
    $this->assertResponse(404);
    $this->drupalGet('taxonomy_field_menu/' . $this->taxonomy_field_menu->menu_name . '/' . $this->terms[0]->tid);
    $this->assertNoLink($new_term->name);
  }
}
