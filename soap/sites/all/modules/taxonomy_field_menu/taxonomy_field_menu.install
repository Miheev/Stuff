<?php

/**
 * @file
 * Install, update, and uninstall functions for taxonomy field menu module.
 */

/**
 * Implements hook_schema().
 */
function taxonomy_field_menu_schema() {
  $schema['taxonomy_field_menu'] = array(
    'description' => 'Stores taxonomy field menus information.',
    'fields' => array(
      'field_name' => array(
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
        'default' => 0,
        'description' => "The taxonomy field's name.",
      ),
      'vid' => array(
        'type' => 'int',
        'not null' => TRUE,
        'unsigned' => TRUE,
        'default' => 0,
        'description' => "Vocabulary id for this taxonomy field.",
      ),
      'menu_name' => array(
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
        'description' => "Taxonomy field menus's menu name.",
      ),
      'node_type' => array(
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
        'description' => "Node type's name and its taxonomy field's instance label will be used to construct custom term page url.",
      ),
      'custom_page' => array(
        'type' => 'int',
        'not null' => TRUE,
        'unsigned' => TRUE,
        'default' => 1,
        'description' => "Whether terms inside this taxonomy field menu uses custom term page. This will be locked, once set.",
      ),
      'child_node' => array(
        'type' => 'int',
        'not null' => TRUE,
        'unsigned' => TRUE,
        'default' => 1,
        'description' => "Whether custom term page includes child nodes from child terms, provided this menu uses custom term page.",
      ),
      'sync_node' => array(
        'type' => 'int',
        'not null' => TRUE,
        'unsigned' => TRUE,
        'default' => 1,
        'description' => "Whether synchronize taxonomy field menu when a node is updated. This will be locked, once set.",
      ),
      'sync_term' => array(
        'type' => 'int',
        'not null' => TRUE,
        'unsigned' => TRUE,
        'default' => 1,
        'description' => "Whether synchronize taxonomy field menu when term(s) get updated. This will be locked, once set.",
      ),
      'url_alias' => array(
        'type' => 'int',
        'not null' => TRUE,
        'unsigned' => TRUE,
        'default' => 1,
        'description' => "Whether this taxonomy field menu makes use of url alias.",
      ),
    ),
    'primary key' => array('field_name'),
    'indexes' => array(
      'menu name' => array('menu_name'),
      'vid' => array('vid'),
    ),
    'unique keys' => array(
      'menu_name' => array('menu_name'),
    ),
  );

  return $schema;
}

/**
 * Implements hook_install().
 */
function taxonomy_field_menu_install() {
  // Set pathauto pattern variable for taxonomy field menus.
  variable_set('pathauto_taxonomy_field_menu_pattern', '[taxonomy_field_menu:node-type-name]/[taxonomy_field_menu:field-instance-label]/[taxonomy_field_menu:term-name]');
}

/**
 * Implements hook_uninstall().
 */
function taxonomy_field_menu_uninstall() {
  // Delete pathauto variable.
  variable_del('pathauto_taxonomy_field_menu_pattern');
  cache_clear_all('variables', 'cache');
}

/**
 * Implements hook_disable().
 */
function taxonomy_field_menu_disable() {
  $taxonomy_field_menus = _taxonomy_field_menu_get_menus();
  foreach ($taxonomy_field_menus as $taxonomy_field_menu) {
    _taxonomy_field_menu_delete_menu($taxonomy_field_menu);
  }
}
